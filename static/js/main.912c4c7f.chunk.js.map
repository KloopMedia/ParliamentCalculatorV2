{"version":3,"sources":["data/PARTIES_RESULTS_REACT_LEVEL_ONE.csv","electionsConfig.js","components/ParlamentChart.js","components/Parties.js","util/districtsMatching.js","components/FormTwoChart.js","components/CutoffSlider.js","components/RegionsMap.js","util/partyMathching.js","components/DistrictsDifferenceChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","electionsConfig","cutoff","totalChairs","maxChairsForParty","parties","against_all_cutoff","against_all_message","cutoff_message","against_all_reached_message","distribute_all_votes_message","one_party_cutoff_only_message","ItemSeriesModule","Highcharts","React","memo","props","highcharts","constructorType","options","chartData","title","console","log","chart","type","text","subtitle","legend","labelFormat","series","name","keys","data","dataLabels","enabled","format","center","size","startAngle","endAngle","prevProps","nextProps","prepareChartData","partiesSet","Object","map","party","chairsNumber","parlamentResultChairs","Number","colorParty","partyChartInfo","parseInt","push","isAgainstAllReached","againstAllReached","onlyOnePartyPassed","partiesBase","Grid","container","justify","showCompareChart","districts","districtsShow","matchDistrict","FormTwoChart","context","loadElectionsResultsData","d3","require","then","forEach","d","form2_percent","parseFloat","total","resultsData","undefined","voteResults","formTwoPercents","result","histogram","thresholds","bins","updateGraph","markPointIndex","markPointX","markPointLabel","drawMarkPoint","x0","toString","x1","toFixed","length","yData","binData","xData","graphOption","subtext","tooltip","trigger","axisPointer","toolbox","show","feature","dataView","readOnly","magicType","calculable","xAxis","yAxis","barWidth","color","markPoint","symbol","symbolSize","itemStyle","opacity","label","formatter","coord","markArea","state","setState","onChartClick","minInterval","index","this","echartsInstance","echartsReactRef","getEchartsInstance","zr","getZr","on","isAllowedRender","ref","e","option","Component","muiTheme","createMuiTheme","overrides","MuiSlider","thumb","track","rail","useStyles","makeStyles","theme","root","width","margin","height","spacing","marks","value","valuetext","CutoffSlider","classes","className","Typography","id","gutterBottom","ThemeProvider","Slider","defaultValue","getAriaValueText","onChange","cutoffOnChange","aria-labelledby","step","valueLabelDisplay","min","max","setTooltipContent","onDistrictClick","data-tip","projection","projectionConfig","scale","minZoom","maxZoom","zoom","geography","geographies","geo","key","rsmKey","stroke","onMouseEnter","properties","ADM1_RU","Shape_Area","onClick","onMouseLeave","style","default","fill","outline","hover","pressed","coordinates","textAnchor","partiesForMap","matchPartyForMap","matchParty","DistrictsDifferenceChart","diff","base","labelRight","position","labelLeft","itemStyleRed","itemStyleGreen","tooltipDataBase","totalBase","tooltipData","partyData","unshift","basePercent","percentDiff","district","grid","top","bottom","splitLine","lineStyle","axisLine","axisLabel","axisTick","stack","App","UIKtotal","resultsSummary","hasOwnProperty","voteResult","calculateResults","resultsDataDisctrictsBase","entries","partySum","filter","level_one","keyFiltered","createTooltipTable","content","resultsDataDisctricts","borderCollapse","handleContentTooltip","setCutoff","event","filteredResults","UIKleft","UIKcutted","resultsSummaryDistricts","handeOnDistrictClick","percentSum","totalPassedParlamentPercent","stateParties","percentsLeft","parlamentResultPercents","parlamentResultChairsFloat","message","Math","floor","residual","sortedParties","sortProperties","distributeLeft","item","monopolyParty","isMonopoly","monopolyChairs","monopolyPercent","monopolyResidual","passCounter","geoData","dataForChartDifference","defaultState","partyInfo","resultsSummaryDistrictsBase","obj","sortedBy","isNumericSort","reverse","reversed","sortable","sort","a","b","x","y","padding","TextField","disabled","variant","fullWidth","inputProps","fontSize","fontWeight","InputLabelProps","multiline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.912c4c7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PARTIES_RESULTS_REACT_LEVEL_ONE.42ccabd3.csv\";","const electionsConfig = {\n    cutoff: 7,\n    totalChairs: 120,\n    maxChairsForParty: 65,\n    parties: [\"Биримдик\", \n              \"Мекенчил\", \n              \"Ыйман Нуру\", \n              \"Мекеним Кыргызстан\", \n              \"Реформа\", \n              \"Ата Мекен\", \n              \"Замандаш\", \n              \"Бутун Кыргызстан\", \n              \"Социал-демократы\", \n              \"Мекен Ынтымагы\", \n              \"Политическая партия ветеранов войны в Афганистане и участников других боевых конфликтов\", \n              \"Ордо\", \n              \"Бир Бол\", \n              \"Республика\", \n              \"Кыргызстан\", \n              \"Чон казат\", \n              \"Против всех\"],\n    against_all_cutoff: \"50\",\n    against_all_message: \"Пока процент голосов против всех не достигнет барьера, это эти голоса по сути только помогают лидирующим партиям получить больше мест. Барьер того, чтобы голоса против всех начали влиять на что-то равен \",\n    cutoff_message: \"Партия не получит мест в парламенте пока не преодолеет барьер в \",\n    against_all_reached_message: \"\",\n    distribute_all_votes_message: \"Распределите 100% голосов между партиями, чтобы увидеть, какая партия получит сколько мест в парламенте\",\n    one_party_cutoff_only_message: \"Сценарий, при котором только одна партия набирает больше 7 процентов, не учтён в законодательстве Кыргызстана. При этом исходе скорее всего будут объявлены перевыборы, если только действующий парламент не решит иначе\"\n  }\n\nexport default electionsConfig","import React from 'react'\n\nimport * as Highcharts from 'highcharts';\nimport ItemSeriesModule from 'highcharts/modules/item-series';\nimport HighchartsReact from 'highcharts-react-official'\n\nItemSeriesModule(Highcharts);\n\nconst generateChartData = (chartData, title) => {\n\n    console.log('DRAW CHART')\n    console.log(chartData)\n    const options = {\n\n        chart: {\n            type: 'item'\n        },\n    \n        title: {\n            text: title\n        },\n    \n        subtitle: {\n            text: 'Жогорку Кенеш'\n        },\n    \n        legend: {\n            labelFormat: '{name} <span style=\"opacity: 0.4\">{y}</span>'\n        },\n    \n        series: [{\n            name: 'Депутатов',\n            keys: ['name', 'y', 'color', 'label'],\n            data: chartData,\n            dataLabels: {\n                enabled: true,\n                format: '{point.label}'\n            },\n    \n            // Circular options\n            center: ['50%', '88%'],\n            size: '170%',\n            startAngle: -100,\n            endAngle: 100\n        }]\n    }\n\n    return options\n}\n\nconst ParlamentChart = (props) => <HighchartsReact\n  highcharts={Highcharts}\n  constructorType={'chart'}\n  options={generateChartData(props.chartData, props.title)}\n/>\n\nconst areEqual = (prevProps, nextProps) => {\n    return (prevProps.chartData === nextProps.chartData)\n    }\n\nexport default React.memo(ParlamentChart, areEqual);\n  \n//export default ParlamentChart","import React from 'react';\nimport Grid from '@material-ui/core/Grid'\n\nimport electionsConfig from '../electionsConfig'\n\nimport ParlamentChart from '../components/ParlamentChart'\n\nimport { Typography } from '@material-ui/core';\n\nconst Parties = (props) => {\n\n    const isAgainstAllReached = props.againstAllReached;\n    const onlyOnePartyPassed = props.onlyOnePartyPassed\n\n    console.log('PARTIES')\n    console.log(props.parties)\n    console.log(props.partiesBase)\n\n    return (\n        <div>                            \n\n            <Grid container justify=\"center\">\n                <ParlamentChart \n                    chartData={prepareChartData('partiesBase', props)}\n                    title='Распределение мест ДО'>\n\n                </ParlamentChart>\n\n                {props.showCompareChart\n                    ? <ParlamentChart \n                        chartData={prepareChartData('parties', props)}\n                        title='Распределение мест ПОСЛЕ'\n                        >\n\n                    </ParlamentChart>\n                    : <div></div>\n                }\n            </Grid>       \n\n            {/* <Typography variant=\"body1\">Осталось распределить: {this.state.percentsLeft}</Typography>                 */}\n\n            <b>{isAgainstAllReached ? electionsConfig.against_all_reached_message : ''}</b>\n\n            <b>{onlyOnePartyPassed ? electionsConfig.one_party_cutoff_only_message : ''}</b>                \n\n        </div>\n    )\n    \n}\n\nconst prepareChartData = (partiesSet, props) => {\n\n    console.log('CHART DATA')\n    console.log(props)\n\n    let chartData = []\n\n    Object.keys(props[partiesSet]).map((party) => {\n        \n        let chairsNumber = props[partiesSet][party].parlamentResultChairs\n\n        if (Number(chairsNumber) > 0) {\n\n            console.log(chairsNumber)\n\n            let colorParty = ''\n            if (party=='Биримдик'){\n                colorParty = '#7cb5ec'\n            }else if(party=='Мекеним Кыргызстан'){\n                colorParty = '#434348'\n            }else if(party=='Бутун Кыргызстан'){\n                colorParty = '#90ed7d'\n            }else if(party=='Кыргызстан'){\n                colorParty = '#f7a35c'\n            }else if(party=='Мекенчил'){\n                colorParty = '#ff4000'\n            }\n\n            let partyChartInfo = [party, parseInt(chairsNumber), colorParty, party]\n            chartData.push(partyChartInfo)              \n        } \n                    \n    })    \n    return chartData\n}\n\nconst areEqual = (prevProps, nextProps) => {\n\n    return (prevProps.parties === nextProps.parties && prevProps.partiesBase === nextProps.partiesBase)\n    }\n\nexport default React.memo(Parties, areEqual);\n","export const districts = {\n    'Таласская': \"ТАЛАССКАЯ ТИК\",\n    'г.Ош' : 'ОШ Г.',\n    'Ошская' : 'ОШСКАЯ ОБЛАСТЬ',\n    'Нарынская' : 'НАРЫНСКАЯ ОБЛАСТЬ',\n    'Джалал-Абадская' : 'ДЖАЛАЛ-АБАДСКАЯ ОБЛАСТЬ',\n    'Иссык-Кульская' : 'ЫСЫК-КУЛЬСКАЯ ОБЛАСТЬ',\n    'Чуйская' : 'ЧУЙСКАЯ ОБЛАСТЬ', \n    'г.Бишкек' : 'БИШКЕК Г.',\n    'Баткенская' :  'БАТКЕНСКАЯ ОБЛАСТЬ'\n}\n\nexport const districtsShow = {\n    'ТАЛАССКАЯ ТИК': \"Таласская область\",\n    'ОШ Г.' : 'г. Ош',\n    'ОШСКАЯ ОБЛАСТЬ' : 'Ошская область',\n    'НАРЫНСКАЯ ОБЛАСТЬ' : 'Нарынская область',\n    'ДЖАЛАЛ-АБАДСКАЯ ОБЛАСТЬ' : 'Джалал-Абадская область',\n    'ЫСЫК-КУЛЬСКАЯ ОБЛАСТЬ' : 'Ысык-Кульская область',\n    'ЧУЙСКАЯ ОБЛАСТЬ' : 'Чуйская область', \n    'БИШКЕК Г.' : 'г. Бишкек',\n    'БАТКЕНСКАЯ ОБЛАСТЬ' :  'Баткенская область'\n}\n\nexport const matchDistrict = (title) => {\n    if (title in districts) {\n        return districts[title]\n    }\n    else {\n        return title\n    }      \n}\n\nexport const matchDistrictShow = (title) => {\n    if (title in districtsShow) {\n        return districtsShow[title]\n    }\n    else {\n        return title\n    }      \n}\n\nexport default matchDistrict;","import React, {Component} from 'react';\nimport ReactEcharts from \"echarts-for-react\";\nimport 'echarts-gl';\nimport EChartsStat from 'echarts-stat'\n\nimport matchDistrict, {districts, matchDistrictShow} from '../util/districtsMatching'\n\nimport * as d3 from 'd3'\n\nclass FormTwoChart extends Component {\n    constructor(props, context) {\n        super(props, context);\n\n        console.log('FORM TWO')   \n        console.log(props)\n\n        this.voteResults = []\n        this.bins = []\n\n        this.state = {graphOption : {\n            title : {\n                text: '',\n                subtext: ' '\n              },\n              tooltip : {\n                trigger: 'axis',\n                axisPointer : {// Axis indicator, axis trigger is valid\n                  type : 'line'// default is a straight line, optional: 'line' | 'shadow'\n                }\n              },\n              legend: {\n                data:['volume']\n              },\n              toolbox: {\n                show : true,\n                feature : {\n                  dataView : {show: true, readOnly: false},\n                  magicType : {show: true, type: ['line', 'bar']},\n                }\n              },\n              calculable : true,\n              xAxis : [\n                {\n                  type : 'category',\n                  data : [],\n                  minInterval: -50\n                }\n              ],\n              yAxis : [\n                {\n                  type : 'value'\n                }\n              ],\n              series : [\n                  {\n                      name:'volume',\n                      type:'bar',\n                      data:[],\n                      barWidth: '100%',\n                      color : \"#2874A6\"\n\n                  }\n              ]\n            }\n        }\n    }\n\n    loadElectionsResultsData = () => {\n        d3.csv(require('../data/PARTIES_RESULTS_REACT_LEVEL_ONE.csv')).then(data => {\n            data.forEach(function(d) {\n                d.form2_percent = parseFloat(d.form2_percent)\n                d.total = parseFloat(d.total)\n                //d.uic_number= parseFloat(d.uic_number)\n                d['«АТА МЕКЕН» саясий социалисттик партиясы'] = parseFloat(d['«АТА МЕКЕН» саясий социалисттик партиясы'])\n                d['«АФГАНИСТАН СОГУШУНУН АРДАГЕРЛЕРИ ЖАНА УШУЛ СЫЯКТУУ КАГЫШУУЛАРГА КАТЫШКАНДАРДЫН САЯСИЙ ПАРТИЯСЫ»'] = parseFloat(d['«АФГАНИСТАН СОГУШУНУН АРДАГЕРЛЕРИ ЖАНА УШУЛ СЫЯКТУУ КАГЫШУУЛАРГА КАТЫШКАНДАРДЫН САЯСИЙ ПАРТИЯСЫ»'])\n                d['«БИР БОЛ»'] = parseFloat(d['«БИР БОЛ»']) \n                d['«БИРИМДИК»'] = parseFloat(d['«БИРИМДИК»'])\n                d['«БҮТҮН КЫРГЫЗСТАН» саясий партиясы'] = parseFloat(d['«БҮТҮН КЫРГЫЗСТАН» саясий партиясы'])\n                d['«ЗАМАНДАШ»'] = parseFloat(d['«ЗАМАНДАШ»'])\n                d['«КЫРГЫЗСТАН»'] = parseFloat(d['«КЫРГЫЗСТАН»'])\n                d['«МЕКЕН ЫНТЫМАГЫ»'] = parseFloat(d['«МЕКЕН ЫНТЫМАГЫ»'])\n                d['«МЕКЕНИМ КЫРГЫЗСТАН»'] = parseFloat(d['«МЕКЕНИМ КЫРГЫЗСТАН»'])\n                d['«МЕКЕНЧИЛ»'] = parseFloat(d['«МЕКЕНЧИЛ»'])\n                d['«ОРДО»'] = parseFloat(d['«ОРДО»'])\n                d['«РЕФОРМА» партиясы'] = parseFloat(d['«РЕФОРМА» партиясы'])\n                d['«ЧОҢ КАЗАТ»'] = parseFloat(d['«ЧОҢ КАЗАТ»'])\n                d['«ЫЙМАН НУРУ»'] = parseFloat(d['«ЫЙМАН НУРУ»'])\n                d['БААРЫНА КАРШЫ'] =  parseFloat(d['БААРЫНА КАРШЫ'])\n                d['РЕСПУБЛИКА'] = parseFloat(d['РЕСПУБЛИКА'])\n                d['СОЦИАЛ-ДЕМОКРАТТАР'] = parseFloat(d['СОЦИАЛ-ДЕМОКРАТТАР'])\n                });\n\n            return data                 \n            \n            }).then((resultsData) => {\n\n            if(typeof(resultsData) !== undefined){\n                this.voteResults = resultsData\n                \n                let formTwoPercents = []\n                resultsData.forEach(result => {\n                    formTwoPercents.push(result.form2_percent)\n                })\n\n                //this.bins = EChartsStat.histogram(formTwoPercents).customData.slice(1, 12);\n\n                 // set the parameters for the histogram \n                 let histogram = d3.histogram().thresholds([0,5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115]);\n                 this.bins = histogram(formTwoPercents);\n                \n                this.updateGraph()\n            }                  \n            });          \n            \n    }\n\n    getCutoffByIndex(index){\n        return this.bins[index].x1\n    }\n\n    updateGraph = (markPointIndex) => {\n\n        console.log('UPDATE')\n        console.log(this.bins)\n\n        let markPointX = 0\n        let markPointY = 0\n        let markPointLabel = ''\n        let drawMarkPoint = false\n\n        if (typeof(markPointIndex) !== \"undefined\"){\n            \n            markPointX = this.bins[markPointIndex].x0.toString() + '-' + this.bins[markPointIndex].x1.toFixed(0).toString() + '%'\n            markPointY = this.bins[markPointIndex].length + 10\n            markPointLabel = '< ' + this.bins[markPointIndex].x1.toFixed(0).toString() + '%'\n\n            drawMarkPoint = true\n        }\n\n        let yData = []\n        this.bins.forEach(binData => {\n            yData.push(binData.length)\n        })\n\n        let xData = []\n        this.bins.forEach(binData => {\n            xData.push(binData.x0.toString() + '-' + binData.x1.toFixed(0).toString() + '%')\n        })\n\n        let graphOption = {\n            title : {\n                text: '',\n                subtext: ' '\n              },\n              tooltip : {\n                trigger: 'axis',\n                axisPointer : {// Axis indicator, axis trigger is valid\n                  type : 'line'// default is a straight line, optional: 'line' | 'shadow'\n                }\n              },\n              legend: {\n                data:['Количество УИК']\n              },\n              toolbox: {\n                show : true,\n                feature : {\n                  dataView : {show: true, readOnly: false},\n                  magicType : {show: true, type: ['line', 'bar']},\n                }\n              },\n              calculable : true,\n              xAxis : [\n                {\n                  type : 'category',\n                  data : xData\n                }\n              ],\n              yAxis : [\n                {\n                  type : 'value'\n                }\n              ],\n              series : [\n                  {\n                    name:'Количество УИК',\n                    type:'bar',\n                    data:yData,\n                    barWidth: '100%',\n                    color : \"#2874A6\",\n                    markPoint : {                            \n                            symbol: 'pin',\n                            symbolSize: 75,\n                            itemStyle: {\n                                opacity: drawMarkPoint,\n                                color: '#ff4000'\n                            },\n                            label: {\n                                show: true,\n                                formatter: '{b}'\n\n                            },\n                            data : [{\n                                name: markPointLabel,\n                                coord: [markPointX, this.bins[0].length], // The number 5 represents xAxis.data[5], that is, '33'.\n                                // coord: ['5', 33.4] // The string '5' represents the '5' in xAxis.data.\n                                }\n                            ]\n                        },\n                    markArea: {\n                        \"silent\": true,\n                        \"data\": [\n                            [\n                                {\n                                    //name: 'УИКи в которых форма 2 меньше',\n                                    coord: ['0-5%', 0]\n                                },\n                                {\n                                    coord: [markPointX, this.bins[0].length]\n                                }\n                            ]\n                        ]\n                    }\n                    //   markPoint : {\n                    //       data : [\n                    //           {type : 'max', name: 'maximum'},\n                    //           {type : 'min', name: 'minimum'}\n                    //       ]\n                    //   }\n                    //   markLine : {\n                    //       data : [\n                    //           {type : 'average', name: 'average value'}\n                    //       ]\n                    //   }\n                  }\n              ]\n            }\n\n            console.log('GRAPH')\n            console.log(this.state.graphOption !== graphOption)\n            if(this.state.graphOption !== graphOption){\n                this.setState({graphOption: graphOption})\n            }                \n    }\n\n    componentDidMount() {\n\n        this.echartsInstance = this.echartsReactRef.getEchartsInstance();\n        this.zr = this.echartsInstance.getZr();\n\n        this.zr.on('click', this.onChartClick);     \n\n        if(this.bins.length == 0){\n            this.loadElectionsResultsData()    \n        }\n                   \n    }\n\n    onChartClick = (...rest) => {\n\n        // if (typeof(rest[0].target) !== 'undefined'){\n        //     let cutoff = this.getCutoffByIndex(rest[0].target.dataIndex)        \n\n        //     //Фильтр\n        //     let filteredResults = this.voteResults.filter(function(result) {\n        //         return result.form2_percent < cutoff;\n        //     });\n\n        //     let resultsSummary = {}\n        //     let resultsSummaryDistricts = {}\n\n        //     //Для графика распределения\n        //     filteredResults.forEach(result => {\n        //         Object.keys(result).map((key) => {\n\n        //             if (resultsSummary.hasOwnProperty(key)){\n        //                 resultsSummary[key] += result[key]\n        //             }else{\n        //                 resultsSummary[key] = result[key]\n        //             }            \n        //         })  \n\n        //     })         \n\n        //     // console.log(filteredResults)\n\n        //     //Для карты районов\n        //     Object.entries(districts).forEach(([key, value]) => {\n\n        //         let partySum = {}\n\n        //         // console.log('FILTER')\n\n        //         // console.log(key)\n        //         // console.log(value)\n\n        //         let filteredDistrict = filteredResults.filter(function(result) {                    \n        //             return result.level_one == value;\n        //         });\n\n        //         //Суммируем по партиями\n        //         filteredDistrict.forEach(result => {\n        //             Object.keys(result).map((keyFiltered) => {\n    \n        //                 if(keyFiltered !== 'form2_percent' && keyFiltered !== 'level_one'){\n        //                   if (partySum.hasOwnProperty(keyFiltered)){\n        //                       partySum[keyFiltered] += result[keyFiltered]\n        //                   }else{\n        //                       partySum[keyFiltered] = result[keyFiltered]\n        //                   }          \n        //                 }  \n        //             })      \n        //         })     \n\n        //         // console.log('FILTER RESULTS')\n        //         // console.log(partySum)\n        //         // console.log(filteredDistrict)\n\n        //         resultsSummaryDistricts[key] = partySum\n\n        //     })\n\n\n        //     console.log('RESULT SUMMARY')\n        //     console.log(resultsSummary)\n        //     console.log(resultsSummaryDistricts)\n\n        //     this.props.clickOnBar(resultsSummary, resultsSummaryDistricts)\n\n        //     //Потом покрасить\n        //     this.updateGraph(rest[0].target.dataIndex) \n        // }\n\n        \n    };\n\n    render() {\n        \n        let isAllowedRender = true\n        if(this.state.graphOption === undefined) {\n          isAllowedRender = false\n        }   \n\n        return (    \n            \n            <div>\n            {isAllowedRender\n                ? <ReactEcharts\n                    //style={{height: '100vh', width: '100vw'}}\n                    ref={(e) => {this.echartsReactRef = e}}\n                    option={this.state.graphOption}\n                />\n                : <div></div>\n              }\n            </div>                    \n        );\n    }\n}\n\n//export default FormTwoChart;\n\nconst areEqual = (prevProps, nextProps) => {\n    return (prevProps === nextProps)\n    }\n\nexport default React.memo(FormTwoChart, areEqual);","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst muiTheme = createMuiTheme({\n  overrides:{\n    MuiSlider: {\n      thumb:{\n      color: \"red\",\n      },\n      track: {\n        color: 'blue'\n      },\n      rail: {\n        color: 'black'\n      }\n    }\n}\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 300,\n  },\n  margin: {\n    height: theme.spacing(3),\n  },\n}));\n\nconst marks = [\n  {\n    value: 0,\n    label: '0%'\n  },\n  {\n    value: 25,\n    label: '25%'\n  },\n  {\n    value: 50,\n    label: '50%'\n  },\n  {\n    value: 75,\n    label: '75%'\n  },\n  {\n    value: 100,\n    label: '100%'\n  },\n];\n\nconst valuetext = (value) => {  \n  return `${value}%`;\n}\n\nexport default function CutoffSlider(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Typography id=\"discrete-slider-always\" gutterBottom>\n         \n      </Typography>\n      <ThemeProvider theme={muiTheme}>\n      <Slider\n        defaultValue={0}\n        getAriaValueText={valuetext}\n        onChange={props.cutoffOnChange}\n        aria-labelledby=\"discrete-slider-always\"\n        step={5}\n        marks={marks}\n        valueLabelDisplay=\"on\"\n        min={0}\n        max={115}\n      />\n      </ThemeProvider>\n    </div>\n  );\n}\n\n","import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  //\"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n  \"https://raw.githubusercontent.com/Xakim1c/parliament-calculator-v2/main/src/data/kg_regions_topo.json\"\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({ setTooltipContent, onDistrictClick} ) => {\n  \n  return (\n      <ComposableMap data-tip=\"\" projection=\"geoEqualEarth\"  width={1000} height={500} projectionConfig={{scale: 6000}}>\n        <ZoomableGroup center={[74.5,41.2]} minZoom={1} maxZoom={1}  zoom={1}>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  stroke=\"#8B4513\"\n                  geography={geo}\n                  onMouseEnter={() => {\n                    console.log(geo)\n                    const { ADM1_RU, Shape_Area } = geo.properties;\n                    //setTooltipContent(`${ADM1_RU} — ${rounded(Shape_Area)}` + ': TEST');\n                    setTooltipContent(`${ADM1_RU}`);\n                  }}\n                  onClick={() => {\n                    onDistrictClick(geo.properties)\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#DEB887\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#AEB6BF\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n\n          <Marker coordinates={[75.71,41.41]} fill=\"#777\">\n            <text textAnchor=\"middle\" fill=\"#000000\">\n              Нарынская область\n            </text>\n          </Marker>\n\n          <Marker coordinates={[78.00,42.23]} fill=\"#777\">\n            <text textAnchor=\"middle\" fill=\"#000000\">\n              Иссык-Кульская область\n            </text>\n          </Marker>\n\n          <Marker coordinates={[74.5,42.55]} fill=\"#777\">\n            <text textAnchor=\"middle\" fill=\"#000000\">\n              Чуйская область\n            </text>\n          </Marker>\n\n          <Marker coordinates={[72.2, 42.35]} fill=\"#777\">\n            <text textAnchor=\"middle\" fill=\"#000000\">\n              Таласская область\n            </text>\n          </Marker>\n\n          <Marker coordinates={[72.3, 41.65]} fill=\"#777\">\n            <text textAnchor=\"middle\" fill=\"#000000\">\n              Джалал-Абадская область\n            </text>\n          </Marker>\n\n          <Marker coordinates={[73.4, 40.25]} fill=\"#777\">\n            <text textAnchor=\"middle\" fill=\"#000000\">\n              Ошская область\n            </text>\n          </Marker>\n\n          <Marker coordinates={[70.7, 39.75]} fill=\"#777\">\n            <text textAnchor=\"middle\" fill=\"#000000\">\n              Баткенская область\n            </text>\n          </Marker>\n\n        </ZoomableGroup>\n      </ComposableMap>\n  );\n};\n\nexport default memo(MapChart);\n","const parties = {\n    '«АТА МЕКЕН» саясий социалисттик партиясы': \"Ата Мекен\",\n    '«АФГАНИСТАН СОГУШУНУН АРДАГЕРЛЕРИ ЖАНА УШУЛ СЫЯКТУУ КАГЫШУУЛАРГА КАТЫШКАНДАРДЫН САЯСИЙ ПАРТИЯСЫ»' : \"Политическая партия ветеранов войны в Афганистане и участников других боевых конфликтов\",\n    '«БИР БОЛ»' : \"Бир Бол\",\n    '«БИРИМДИК»' : \"Биримдик\",\n    '«БҮТҮН КЫРГЫЗСТАН» саясий партиясы' : \"Бутун Кыргызстан\",\n    '«ЗАМАНДАШ»' : \"Замандаш\",\n    '«КЫРГЫЗСТАН»' : \"Кыргызстан\",\n    '«МЕКЕН ЫНТЫМАГЫ»' : \"Мекен Ынтымагы\",\n    '«МЕКЕНИМ КЫРГЫЗСТАН»': \"Мекеним Кыргызстан\",\n    '«МЕКЕНЧИЛ»' : \"Мекенчил\",\n    '«ОРДО»' : \"Ордо\",\n    '«РЕФОРМА» партиясы' : \"Реформа\",\n    '«ЧОҢ КАЗАТ»': \"Чон казат\",\n    '«ЫЙМАН НУРУ»' : \"Ыйман Нуру\",\n    'БААРЫНА КАРШЫ' : \"Против всех\",\n    'РЕСПУБЛИКА' :\"Республика\",\n    'СОЦИАЛ-ДЕМОКРАТТАР' : \"Социал-демократы\"\n}\n\nconst partiesForMap = {\n    '«АТА МЕКЕН» саясий социалисттик партиясы': \"Ата Мекен\",\n    '«АФГАНИСТАН СОГУШУНУН АРДАГЕРЛЕРИ ЖАНА УШУЛ СЫЯКТУУ КАГЫШУУЛАРГА КАТЫШКАНДАРДЫН САЯСИЙ ПАРТИЯСЫ»' : \"ППВВвАиУДБК\",\n    '«БИР БОЛ»' : \"Бир Бол\",\n    '«БИРИМДИК»' : \"Биримдик\",\n    '«БҮТҮН КЫРГЫЗСТАН» саясий партиясы' : \"Бутун Кыргызстан\",\n    '«ЗАМАНДАШ»' : \"Замандаш\",\n    '«КЫРГЫЗСТАН»' : \"Кыргызстан\",\n    '«МЕКЕН ЫНТЫМАГЫ»' : \"Мекен Ынтымагы\",\n    '«МЕКЕНИМ КЫРГЫЗСТАН»': \"Мекеним Кыргызстан\",\n    '«МЕКЕНЧИЛ»' : \"Мекенчил\",\n    '«ОРДО»' : \"Ордо\",\n    '«РЕФОРМА» партиясы' : \"Реформа\",\n    '«ЧОҢ КАЗАТ»': \"Чон казат\",\n    '«ЫЙМАН НУРУ»' : \"Ыйман Нуру\",\n    'БААРЫНА КАРШЫ' : \"Против всех\",\n    'РЕСПУБЛИКА' :\"Республика\",\n    'СОЦИАЛ-ДЕМОКРАТТАР' : \"Социал-демократы\"\n}\n\nconst matchParty = (title) => {\n    if (title in parties) {\n        return parties[title]\n    }\n    else {\n        return title\n    }      \n}\n\nexport const matchPartyForMap = (title) => {\n    if (title in partiesForMap) {\n        return partiesForMap[title]\n    }\n    else {\n        return title\n    }      \n}\n\nexport default matchParty;","import React from 'react';\nimport ReactEcharts from \"echarts-for-react\";\nimport 'echarts-gl';\n\nimport matchParty from '../util/partyMathching'\n\nconst DistrictsDifferenceChart = (props) =>  {\n\n    if (typeof(props.chartData.diff) === 'undefined' || typeof(props.chartData.base) === 'undefined'){\n        return(<div></div>)\n    }\n\n    console.log('DRAW DIFF')\n    console.log(typeof(props.chartData.diff) === undefined)\n\n    let labelRight = {position: 'right'}\n    let labelLeft = {position: 'left'}\n\n    let itemStyleRed = {color: '#e76f51'}\n    let itemStyleGreen = {color: '#2a9d8f'}\n\n    let tooltipDataBase = props.chartData.base\n    let totalBase = tooltipDataBase['total']\n\n    let tooltipData = props.chartData.diff\n    let total = tooltipData['total']\n\n    let xData = []\n    let yData = []\n\n    Object.keys(tooltipDataBase).map(party => {\n        let partyData = {}\n\n        if(party == 'total'){\n            return\n        }\n\n        xData.unshift(matchParty(party))\n\n        let basePercent = (tooltipDataBase[party] / totalBase * 100).toFixed(2)\n        let diffPercent = (tooltipData[party] / total * 100).toFixed(2)\n\n        let percentDiff = (diffPercent - basePercent).toFixed(2)\n        partyData['value']  = percentDiff\n\n        if (percentDiff <= 0){\n            partyData['label'] = labelLeft\n            partyData['itemStyle']  = itemStyleRed\n        }else{\n            partyData['label'] = labelRight\n            partyData['itemStyle']  = itemStyleGreen\n        }\n\n        yData.unshift(partyData)     \n        \n    })\n\n    let option = {\n        title: {\n            text: props.chartData.district,\n            subtext: 'Разница в процентах между результатами \"ДО\" и \"ПОСЛЕ\"'\n        },\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {     \n                type: 'shadow'       \n            }\n        },\n        grid: {\n            top: 80,\n            bottom: 30\n        },\n        xAxis: {\n            type: 'value',\n            position: 'top',\n            splitLine: {\n                lineStyle: {\n                    type: 'dashed'\n                }\n            }\n        },\n        yAxis: {\n            type: 'category',\n            axisLine: {show: false},\n            axisLabel: {show: false},\n            axisTick: {show: false},\n            splitLine: {show: false},\n            data: xData\n        },\n        series: [\n            {\n                name: 'Разница',\n                type: 'bar',\n                stack: 'b',\n                label: {\n                    show: true,\n                    formatter: '{b}'\n                },\n                data: yData\n            }\n        ]\n    }        \n\n    return (    \n        \n        <ReactEcharts\n                option={option}\n            />                  \n    ); \n}\n\n\nexport default DistrictsDifferenceChart\n\n","\nimport React, { useState } from \"react\";\n\nimport './App.css';\n\nimport electionsConfig from './electionsConfig'\nimport Parties from './components/Parties'\nimport { Grid, Typography } from '@material-ui/core';\n\nimport FormTwoChart from './components/FormTwoChart'\nimport CutoffSlider from './components/CutoffSlider'\n\nimport Map from './components/RegionsMap'\nimport ReactTooltip from \"react-tooltip\";\n\nimport DistrictsDifferenceChart from './components/DistrictsDifferenceChart'\n\nimport matchParty, {matchPartyForMap} from './util/partyMathching'\nimport {districts, matchDistrictShow, matchDistrict} from './util/districtsMatching'\n\nimport TextField from '@material-ui/core/TextField';\n\nimport * as d3 from 'd3'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let defaultState = {}\n\n    defaultState.percentsLeft=100\n    defaultState.againstAllReached = false\n    defaultState.onlyOnePartyPassed = false\n\n    defaultState.dataForChartDifference = {}\n\n    defaultState.content = ''\n    //const [content, setContent] = useState(\"\");\n\n    //Form2 state\n    this.voteResults = []\n    this.cutoff = 0\n\n    let parties = {}\n    let partiesBase = {}\n    electionsConfig.parties.map((value) => {\n\n        let partyInfo = {}\n\n        partyInfo.voteResult = 0\n        partyInfo.parlamentResultChairs = 0\n        partyInfo.parlamentResultPercents = 0\n        partyInfo.residual = 0\n        partyInfo.monopolyResidual = 0\n        partyInfo.message = ''\n\n        parties[value]=partyInfo\n    })\n\n    electionsConfig.parties.map((value) => {\n\n        let partyInfo = {}\n\n        partyInfo.voteResult = 0\n        partyInfo.parlamentResultChairs = 0\n        partyInfo.parlamentResultPercents = 0\n        partyInfo.residual = 0\n        partyInfo.monopolyResidual = 0\n        partyInfo.message = ''\n\n        partiesBase[value]=partyInfo\n    })\n\n    defaultState.parties = parties\n    defaultState.partiesBase = partiesBase\n\n    this.state = defaultState;\n    this.showCompareChart = false\n\n    this.resultsDataDisctricts = {}\n    this.resultsSummaryDistrictsBase = {}\n\n    this.UIKtotal = 0\n    this.UIKleft = 0\n    this.UIKcutted = 0\n  }    \n\n  componentDidMount() { \n        \n    //Костыль\n    if(this.state.partiesBase['Биримдик'].voteResult == 0){\n        this.loadElectionsResultsData() \n    }                       \n  }\n\n  loadElectionsResultsData = () => {\n    d3.csv(require('./data/PARTIES_RESULTS_REACT_LEVEL_ONE.csv')).then(data => {\n        data.forEach(function(d) {\n            d.form2_percent = parseFloat(d.form2_percent)\n            d.total = parseFloat(d.total)\n            //d.uic_number= parseFloat(d.uic_number)\n            d['«АТА МЕКЕН» саясий социалисттик партиясы'] = parseFloat(d['«АТА МЕКЕН» саясий социалисттик партиясы'])\n            d['«АФГАНИСТАН СОГУШУНУН АРДАГЕРЛЕРИ ЖАНА УШУЛ СЫЯКТУУ КАГЫШУУЛАРГА КАТЫШКАНДАРДЫН САЯСИЙ ПАРТИЯСЫ»'] = parseFloat(d['«АФГАНИСТАН СОГУШУНУН АРДАГЕРЛЕРИ ЖАНА УШУЛ СЫЯКТУУ КАГЫШУУЛАРГА КАТЫШКАНДАРДЫН САЯСИЙ ПАРТИЯСЫ»'])\n            d['«БИР БОЛ»'] = parseFloat(d['«БИР БОЛ»']) \n            d['«БИРИМДИК»'] = parseFloat(d['«БИРИМДИК»'])\n            d['«БҮТҮН КЫРГЫЗСТАН» саясий партиясы'] = parseFloat(d['«БҮТҮН КЫРГЫЗСТАН» саясий партиясы'])\n            d['«ЗАМАНДАШ»'] = parseFloat(d['«ЗАМАНДАШ»'])\n            d['«КЫРГЫЗСТАН»'] = parseFloat(d['«КЫРГЫЗСТАН»'])\n            d['«МЕКЕН ЫНТЫМАГЫ»'] = parseFloat(d['«МЕКЕН ЫНТЫМАГЫ»'])\n            d['«МЕКЕНИМ КЫРГЫЗСТАН»'] = parseFloat(d['«МЕКЕНИМ КЫРГЫЗСТАН»'])\n            d['«МЕКЕНЧИЛ»'] = parseFloat(d['«МЕКЕНЧИЛ»'])\n            d['«ОРДО»'] = parseFloat(d['«ОРДО»'])\n            d['«РЕФОРМА» партиясы'] = parseFloat(d['«РЕФОРМА» партиясы'])\n            d['«ЧОҢ КАЗАТ»'] = parseFloat(d['«ЧОҢ КАЗАТ»'])\n            d['«ЫЙМАН НУРУ»'] = parseFloat(d['«ЫЙМАН НУРУ»'])\n            d['БААРЫНА КАРШЫ'] =  parseFloat(d['БААРЫНА КАРШЫ'])\n            d['РЕСПУБЛИКА'] = parseFloat(d['РЕСПУБЛИКА'])\n            d['СОЦИАЛ-ДЕМОКРАТТАР'] = parseFloat(d['СОЦИАЛ-ДЕМОКРАТТАР'])\n            });\n\n        return data                 \n        \n        }).then((resultsData) => {\n\n        console.log('TOTAL DATA')\n        console.log(resultsData.length)\n        this.UIKtotal = resultsData.length\n\n        if(typeof(resultsData) !== undefined){\n\n            this.voteResults = resultsData\n\n            let resultsSummary = {}\n\n            resultsData.forEach(result => {\n                Object.keys(result).map((key) => {\n\n                    if (resultsSummary.hasOwnProperty(key)){\n                        resultsSummary[key] += result[key]\n                    }else{\n                        resultsSummary[key] = result[key]\n                    }            \n                })  \n\n            }) \n            \n            const parties = {...this.state.partiesBase}\n\n            Object.keys(resultsSummary).map((key) => {\n\n                if (parties.hasOwnProperty(matchParty([key]))){\n\n                    parties[matchParty([key])].voteResult = resultsSummary[key] / resultsSummary.total * 100   \n                    \n                }  \n            })  \n\n            this.setState( {partiesBase: parties} )\n\n            //Percents left\n            this.calculateResults('partiesBase')\n\n            //Для карты районов\n            let resultsDataDisctrictsBase = {}\n            Object.entries(districts).forEach(([key, value]) => {\n\n                let partySum = {}\n\n                let filteredDistrict = resultsData.filter(function(result) {                    \n                    return result.level_one == value;\n                });\n\n                //Суммируем по партиями\n                filteredDistrict.forEach(result => {\n                    Object.keys(result).map((keyFiltered) => {\n    \n                        if(keyFiltered !== 'form2_percent' && keyFiltered !== 'level_one'){\n                        if (partySum.hasOwnProperty(keyFiltered)){\n                            partySum[keyFiltered] += result[keyFiltered]\n                        }else{\n                            partySum[keyFiltered] = result[keyFiltered]\n                        }          \n                        }  \n                    })      \n                })     \n\n                resultsDataDisctrictsBase[key] = partySum\n            })\n\n            this.resultsDataDisctrictsBase = resultsDataDisctrictsBase\n            \n        }                  \n    });                      \n  }\n\n  createTooltipTable = () => {\n\n    // console.log('CREATE TOOLTIP')\n    // console.log(this.state.content)\n    // console.log(this.resultsDataDisctricts)\n    // console.log(this.resultsDataDisctrictsBase)\n\n    if(this.state.content === ''){\n        console.log('BUG')\n        return (<a\n                    \n            ></a>)\n    }\n\n    if(Object.keys(this.resultsDataDisctricts).length == 0){\n        let tooltipData = this.resultsDataDisctrictsBase[this.state.content] \n        let total = tooltipData['total']\n        //delete tooltipData['total']\n\n        return (<a\n                        \n                >                   \n                    <h3>{this.state.content}</h3>\n        \n                    <table style={{width:'100%', borderCollapse: 'collapse'}}>\n                    <tr>\n                    <th>Партия</th>\n                    <th>Процент</th>\n                    </tr>\n\n                    {Object.keys(tooltipData).map(party => (\n                        <tr>\n                        <td>{matchPartyForMap(party)}</td>\n                        <td>{(tooltipData[party] / total * 100).toFixed(2) + '%'} </td>\n                        </tr>\n                    ))}\n                    \n                </table>\n        \n            </a>)\n\n    }else{\n\n        // console.log('DIFF')\n        let tooltipDataBase = this.resultsDataDisctrictsBase[this.state.content] \n        let totalBase = tooltipDataBase['total']\n\n        let tooltipData = this.resultsDataDisctricts[this.state.content] \n        let total = tooltipData['total']\n        //delete tooltipData['total']\n        return (<a\n                    \n            >                   \n                <h3>{this.state.content}</h3>\n    \n                <table style={{width:'100%', borderCollapse: 'collapse'}}>\n                <tr>\n                <th>Партия</th>\n                <th>ДО</th>\n                <th>ПОСЛЕ</th>\n                </tr>\n\n                {Object.keys(tooltipDataBase).map(party => (\n                    <tr>\n                    <td>{matchPartyForMap(party)}</td>\n                    <td>{(tooltipDataBase[party] / totalBase * 100).toFixed(2) + '%'} </td>\n                    <td>{(tooltipData[party] / total * 100).toFixed(2) + '%'} </td>\n                    </tr>\n                ))}\n                \n            </table>\n    \n        </a>)\n        \n    }        \n}\n\nhandleContentTooltip = (content) => {\n    this.setState({content: content})\n}\n\n\nsetCutoff = (event, value) => {\n    // //console.log(event.target.ariaValueNow)\n    // console.log('EVENT')\n    // console.log(event)\n\n    if(this.cutoff != value){\n            \n\n        //Фильтр\n        let filteredResults = this.voteResults.filter(function(result) {\n            return result.form2_percent < value;\n        });\n\n        this.UIKleft = filteredResults.length\n        this.UIKcutted = this.UIKtotal - this.UIKleft\n\n        console.log(\"TEST UIK\")\n        console.log(this.UIKtotal)\n        console.log(this.UIKleft)\n        console.log(this.UIKcutted)\n\n        let resultsSummary = {}\n        let resultsSummaryDistricts = {}\n\n        //Для графика распределения\n        filteredResults.forEach(result => {\n            Object.keys(result).map((key) => {\n\n                if (resultsSummary.hasOwnProperty(key)){\n                    resultsSummary[key] += result[key]\n                }else{\n                    resultsSummary[key] = result[key]\n                }            \n            })  \n\n        })         \n\n        // console.log(filteredResults)\n\n        //Для карты районов\n        Object.entries(districts).forEach(([key, value]) => {\n\n            let partySum = {}\n\n            // console.log('FILTER')\n\n            // console.log(key)\n            // console.log(value)\n\n            let filteredDistrict = filteredResults.filter(function(result) {                    \n                return result.level_one == value;\n            });\n\n            //Суммируем по партиями\n            filteredDistrict.forEach(result => {\n                Object.keys(result).map((keyFiltered) => {\n\n                    if(keyFiltered !== 'form2_percent' && keyFiltered !== 'level_one'){\n                        if (partySum.hasOwnProperty(keyFiltered)){\n                            partySum[keyFiltered] += result[keyFiltered]\n                        }else{\n                            partySum[keyFiltered] = result[keyFiltered]\n                        }          \n                    }  \n                })      \n            })     \n\n            // console.log('FILTER RESULTS')\n            // console.log(partySum)\n            // console.log(filteredDistrict)\n\n            resultsSummaryDistricts[key] = partySum\n        })\n\n\n        // console.log('RESULT SUMMARY')\n        // console.log(resultsSummary)\n        // console.log(resultsSummaryDistricts)\n\n        this.showCompareChart = true\n        const parties = {...this.state.parties}\n\n        // console.log('CLICK')\n        // console.log(parties)\n\n        //График распределения\n        Object.keys(resultsSummary).map((key) => {\n\n            if (parties.hasOwnProperty(matchParty([key]))){\n                parties[matchParty([key])].voteResult = resultsSummary[key] / resultsSummary.total * 100                   \n            }  \n        })  \n\n        if (this.state.parties !== parties){\n            this.setState( {parties: parties} )\n\n            //Percents left\n            this.calculateResults('parties')\n        }\n\n        //Карта\n        //Для карты районов\n        this.resultsDataDisctricts = resultsSummaryDistricts \n\n        //Разница\n        this.handeOnDistrictClick({ADM1_RU: this.state.content})\n    }\n\n}\n\nsortProperties(obj, sortedBy, isNumericSort, reverse) {\n    sortedBy = sortedBy || 1; // by default first key\n    isNumericSort = isNumericSort || false; // by default text sort\n    reverse = reverse || false; // by default no reverse\n\n    var reversed = (reverse) ? -1 : 1;\n\n    var sortable = [];\n    for (var key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            sortable.push([key, obj[key]]);\n        }\n    }\n    if (isNumericSort)\n        sortable.sort(function (a, b) {\n            return reversed * (a[1][sortedBy] - b[1][sortedBy]);\n        });\n    else\n        sortable.sort(function (a, b) {\n            var x = a[1][sortedBy],\n                y = b[1][sortedBy];\n            return x < y ? reversed * -1 : x > y ? reversed : 0;\n        });\n    return sortable; // array in format [ [ key1, val1 ], [ key2, val2 ], ... ]\n}\n\ncalculateResults = (partiesSet) => {\n\n    let percentSum = 0\n    let totalPassedParlamentPercent = 0\n    let totalChairs = 0 \n\n    let stateParties = this.state[partiesSet]\n\n    Object.keys(stateParties).map((party) => {\n\n        let voteResult = stateParties[party].voteResult\n        percentSum = percentSum + voteResult\n\n        if (voteResult >= electionsConfig.cutoff && party != 'Против всех'){\n            totalPassedParlamentPercent = totalPassedParlamentPercent + voteResult     \n        }\n\n     })     \n     \n    let percentsLeft = Number(100 - percentSum).toFixed(2)\n    this.setState( {percentsLeft: percentsLeft} )\n\n    const parties = {...stateParties} \n\n    if (percentsLeft == 0) {                     \n\n        Object.keys(stateParties).map((party) => {\n\n            let voteResult = stateParties[party].voteResult    \n\n            let parlamentResultPercents = 0  \n            let parlamentResultChairsFloat = 0\n            let parlamentResultChairs = 0 \n            let message = electionsConfig.cutoff_message + ' ' + electionsConfig.cutoff + '%'\n\n            if (voteResult >= electionsConfig.cutoff && party != 'Против всех'){\n                parlamentResultPercents = voteResult * 100 / totalPassedParlamentPercent  \n                parlamentResultChairsFloat = electionsConfig.totalChairs * parlamentResultPercents / 100 \n                parlamentResultChairs = Math.floor(electionsConfig.totalChairs * parlamentResultPercents / 100)\n                message = ''\n            } \n\n            parties[party].parlamentResultPercents = parlamentResultPercents\n            parties[party].parlamentResultChairs = parlamentResultChairs\n            parties[party].residual = (parlamentResultChairsFloat - parlamentResultChairs).toFixed(2)\n            parties[party].message = message\n\n            totalChairs = totalChairs + parlamentResultChairs\n        })  \n        \n        //Распределить мандаты если остались после первичного распределения\n        if (totalChairs != electionsConfig.totalChairs){\n\n            let sortedParties = this.sortProperties(parties, 'residual', true, true)\n\n            let distributeLeft = electionsConfig.totalChairs - totalChairs\n\n            sortedParties.forEach(function (item) {\n\n                if (distributeLeft > 0){\n                    parties[item[0]].parlamentResultChairs += 1 \n                    distributeLeft -= 1\n                }\n              });\n        }\n\n        //Если одна партия набирает больше 65 голосов\n        let monopolyParty = ''\n        let isMonopoly = false\n        let monopolyChairs = 0\n        let monopolyPercent = 0\n        \n        Object.keys(stateParties).map((party) => {\n            if (parties[party].parlamentResultChairs > electionsConfig.maxChairsForParty) {\n                isMonopoly = true\n                monopolyParty = party\n                monopolyChairs = parties[party].parlamentResultChairs\n                monopolyPercent = parties[party].voteResult \n            }\n\n        })\n\n        if (isMonopoly){\n\n            totalChairs = 0\n            Object.keys(stateParties).map((party) => {\n\n                let voteResult = parties[party].voteResult    \n\n                if (voteResult >= electionsConfig.cutoff && party != 'Против всех' ){\n                    if (party == monopolyParty){\n                        parties[party].parlamentResultChairs = electionsConfig.maxChairsForParty\n                    }else{  \n\n                        let parlamentResultPercents = voteResult * 100 / (totalPassedParlamentPercent - monopolyPercent)  \n                        \n                        parties[party].monopolyResidual =  (((monopolyChairs-electionsConfig.maxChairsForParty) * parlamentResultPercents / 100) - (Math.floor((monopolyChairs-electionsConfig.maxChairsForParty) * parlamentResultPercents / 100))).toFixed(2)\n                        parties[party].parlamentResultChairs += Math.floor((monopolyChairs-electionsConfig.maxChairsForParty) * parlamentResultPercents / 100)\n                    }\n\n                    totalChairs = totalChairs + parties[party].parlamentResultChairs\n                }    \n            })  \n            \n             //Распределить мандаты если остались после первичного распределения (если Монополия)\n            if (totalChairs != electionsConfig.totalChairs){                    \n\n                let sortedParties = this.sortProperties(parties, 'monopolyResidual', true, true)\n\n                let distributeLeft = electionsConfig.totalChairs - totalChairs\n\n                sortedParties.forEach(function (item) {                        \n\n                    if (distributeLeft > 0){\n                        if (item[0] != monopolyParty){\n                            parties[item[0]].parlamentResultChairs += 1 \n                            distributeLeft -= 1\n                        }                            \n                    }\n                });\n            }\n\n            //Проверить если одна только партия прошла барьер\n            let passCounter = 0   \n            let onlyOnePartyPassed = false             \n            Object.keys(stateParties).map((party) => {\n                \n                let voteResult = parties[party].voteResult  \n\n                if (voteResult >= electionsConfig.cutoff){\n                    passCounter += 1 \n                }                    \n            })\n\n            if (passCounter < 2){\n\n                onlyOnePartyPassed = true    \n                Object.keys(stateParties).map((party) => {\n                    parties[party].parlamentResultChairs = 0\n                })   \n\n                this.setState( {onlyOnePartyPassed: onlyOnePartyPassed} )\n            }\n        }\n\n    } else {\n        \n        Object.keys(stateParties).map((party) => {\n\n            //parties[party].parlamentResultPercents = 0\n            parties[party].parlamentResultChairs = 0\n            parties[party].residual = 0\n            parties[party].monopolyResidual = 0\n            parties[party].message = ''\n        })             \n    }          \n\n    //Против всех\n    if (parties['Против всех'].voteResult < electionsConfig.against_all_cutoff)  {\n\n        if ((percentsLeft == 0) && (parties['Против всех'].voteResult > 0)){\n            parties['Против всех'].message = electionsConfig.against_all_message                    \n        }else {\n            parties['Против всех'].message = ''\n        }\n        this.setState( {againstAllReached: false} )\n        \n    } else {\n        parties['Против всех'].message = ''\n        this.setState( {againstAllReached: true} )\n    }\n    \n    if(this.state[partiesSet] !== parties){\n        this.setState( {[partiesSet]: parties} )\n    }        \n}\n\n  handeOnDistrictClick = (geoData) => {\n    let tooltipDataBase = this.resultsDataDisctrictsBase[geoData.ADM1_RU] \n    let tooltipData = this.resultsDataDisctricts[geoData.ADM1_RU] \n\n    console.log('STATE handeOnDistrictClick')\n    console.log(geoData.ADM1_RU)\n    \n    this.setState({dataForChartDifference: {'district': matchDistrictShow(matchDistrict(geoData.ADM1_RU)), \n                                            'base': tooltipDataBase, \n                                            'diff': tooltipData}})\n  }\n\n  render () {\n\n    console.log('RENDER APP')\n\n    return (\n      <div className=\"App\">     \n\n        {/* <Typography variant=\"h6\">{electionsConfig.distribute_all_votes_message}</Typography> */}\n\n        <FormTwoChart></FormTwoChart>    \n\n        <Grid container justify=\"center\">\n            Хотите увидеть что было бы если анулировать результаты голосования на участках с аномальным показателем по Форме2? \n        </Grid>\n\n        <Grid container justify=\"center\">\n            Для этого установите бегунок с интересующем Вас процентом\n        </Grid>     \n\n        <Grid container justify=\"center\">\n            <CutoffSlider cutoffOnChange={this.setCutoff}></CutoffSlider>\n        </Grid>\n\n        <div style={{padding: '20px'}} >\n          <Grid container justify=\"center\">          \n            <Grid style={{width: 90, padding:3}}>\n              <TextField  \n                  id='UIK total'\n                  value={this.UIKtotal}\n                  disabled={true}\n                  type ='number'                            \n                  label=\"УИК всего\" \n                  variant=\"outlined\"\n                  fullWidth\n                  inputProps={{style: {fontSize: 14, color: \"black\", fontWeight: 'bold'}}}\n                  InputLabelProps={{style: {fontSize: 14}}}\n                  />                \n            </Grid>\n\n            <Grid style={{width: 90, padding:3}}>\n              <TextField  \n                  id='UIK cutted'\n                  value={this.UIKcutted}\n                  disabled={true}\n                  type ='number'                            \n                  label=\"УИК анул.\" \n                  variant=\"outlined\"\n                  fullWidth\n                  inputProps={{style: {fontSize: 14, color: \"black\", fontWeight: 'bold'}}}\n                  InputLabelProps={{style: {fontSize: 14}}}\n                  />                \n            </Grid>\n\n            <Grid style={{width: 90, padding:3}}>\n              <TextField  \n                  id='UIK left'\n                  value={this.UIKleft}\n                  disabled={true}\n                  type ='number'                            \n                  label=\"УИК ост.\" \n                  variant=\"outlined\"\n                  fullWidth\n                  inputProps={{style: {fontSize: 14, color: \"red\", fontWeight: 'bold'}}}\n                  InputLabelProps={{style: {fontSize: 14}}}\n                  />                \n            </Grid>                  \n          </Grid>\n        </div> \n\n        <Parties\n          parties = {this.state.parties}\n          partiesBase = {this.state.partiesBase}\n          againstAllReached = {this.state.againstAllReached}\n          onlyOnePartyPassed = {this.state.onlyOnePartyPassed} \n          showCompareChart = {this.showCompareChart}     \n        >  \n        </Parties>\n\n        <Grid container justify=\"center\">\n              Для просмотра распределения процентов по областям - наведите на область (нажмите на область для отображения таблицы разности в процентах)                \n        </Grid>\n        \n        <DistrictsDifferenceChart chartData={this.state.dataForChartDifference} ></DistrictsDifferenceChart>\n        \n        <Grid container justify=\"center\">\n            <div style={{width: 1000, height: '100%'}}>\n                <Map setTooltipContent={this.handleContentTooltip} onDistrictClick={this.handeOnDistrictClick} />        \n            </div>                    \n        </Grid>\n\n\n        <ReactTooltip\n                type='error'\n                // place='top'\n                multiline={true}>\n                \n                <div>\n\n                    {this.createTooltipTable()}\n\n                </div>   \n                \n        </ReactTooltip>\n \t\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}